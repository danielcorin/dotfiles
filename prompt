__git_ps1 ()
{
    local b="$(git symbolic-ref HEAD 2>/dev/null)";
    if [ -n "$b" ]; then
        printf " (%s)" "${b##refs/heads/}";
    fi
}

# The various escape codes that we can use to color our prompt.
        RED="\[\033[0;31m\]"
     YELLOW="\[\033[1;33m\]"
      GREEN="\[\033[0;32m\]"
       BLUE="\[\033[1;34m\]"
  LIGHT_RED="\[\033[1;31m\]"
LIGHT_GREEN="\[\033[1;32m\]"
       CYAN="\[\033[1;36m\]"
      WHITE="\[\033[1;37m\]"
 LIGHT_GRAY="\[\033[0;37m\]"
 COLOR_NONE="\[\e[0m\]"

# Detect whether the current directory is a git repository.
function is_git_repository {
  git branch > /dev/null 2>&1
}

# Determine the branch/state information for this git repository.
function set_git_branch {
  # Capture the output of the "git status" command.
  git_status="$(git status 2> /dev/null)"

  # Set color based on clean/staged/dirty.
  if [[ ${git_status} =~ "clean" ]]; then
    state="${GREEN}"
  elif [[ ${git_status} =~ "Changes" ]]; then
    state="${YELLOW}"
  else
    state="${LIGHT_RED}"
  fi


  # Get the name of the branch.
  branch="$(git rev-parse --abbrev-ref HEAD 2> /dev/null)"

  # Set the final branch string.
  BRANCH="${state}[${branch}]${COLOR_NONE}"
}

# Return the prompt symbol to use, colorized based on the return value of the
# previous command.
function set_prompt_symbol () {
  CORRECTED_COMMAND="";
  if test $1 -eq 0 ; then
    PROMPT_SYMBOL="${PROMPT_CHAR}"
  else
    PROMPT_SYMBOL="${LIGHT_RED}${PROMPT_CHAR}${COLOR_NONE}"
  fi
}

# Determine active Python virtualenv details.
function set_virtualenv () {
  if test -z "$VIRTUAL_ENV" ; then
      PYTHON_VIRTUALENV=""
  else
      PYTHON_VIRTUALENV="${BLUE}[`basename \"$VIRTUAL_ENV\"`]${COLOR_NONE} "
  fi
}

function set_env_vars () {
  # on macOS
  if [[ `uname` = "Darwin" ]]; then
    PROMPT_CHAR="❯"
    TIME_COLOR="${YELLOW}"
  else
    PROMPT_CHAR="✧"
    TIME_COLOR="${RED}"
    BOX="${RED}`hostname`${COLOR_NONE} "
  fi
}

function set_boxer_sync_status () {
	RUNNING=$(ps aux | grep 'boxer sync' | wc -l)
	if [[ ( "$(($RUNNING))" > 1 ) ]] ; then
		BOXER_PROMPT="${GREEN}▲${COLOR_NONE} "
	else
		BOXER_PROMPT=""
	fi
}

function set_cerberus_running_status () {
	RUNNING=$(ps aux | grep 'cerberus' | wc -l)
	if [[ ( "$(($RUNNING))" > 1 ) ]] ; then
		CERBERUS_PROMPT="${GREEN}⇄${COLOR_NONE} "
	else
		CERBERUS_PROMPT=""
	fi
}

function set_node_version {
	NODE_VERSION=''
	if [ -f package.json ]; then
		NODE_VERSION="${BLUE}[`nvm version`]${COLOR_NONE} "
	fi
}

function set_tmux_session_name {
	TMUX_SESSION=''
	if { [ "$TERM" = "screen" ] && [ ! -z "$TMUX" ]; } then
	  TMUX_SESSION="${LIGHT_GREEN}`tmux display-message -p "#S" | tr -d '\n'` ${COLOR_NONE}"
	fi
}

function set_time {
	TIME="${TIME_COLOR}\A${COLOR_NONE}"
}

function set_prompt_path {
	PROMPT_PATH="${BLUE}\W${COLOR_NONE}"
}


# Set the full bash prompt.
function set_bash_prompt () {
  LAST_COMMAND=$?
  set_time
  set_prompt_path
  set_env_vars
  # Set the PROMPT_SYMBOL variable. We do this first so we don't lose the
  # return value of the last command.
  set_prompt_symbol $LAST_COMMAND

  # Set the PYTHON_VIRTUALENV variable.
  set_virtualenv

  set_boxer_sync_status
  set_cerberus_running_status

  set_tmux_session_name

  # Set the BRANCH variable.
  if is_git_repository ; then
    set_git_branch
  else
    BRANCH=''
  fi

  # Set the bash prompt variable.
  PS1="
${BOXER_PROMPT}${CERBERUS_PROMPT}${TIME} ${BOX}${TMUX_SESSION}${PYTHON_VIRTUALENV}${PROMPT_PATH} ${BRANCH}
${PROMPT_SYMBOL} "
}

# Tell bash to execute this function just before displaying its prompt.
PROMPT_COMMAND=set_bash_prompt
